/*   -*- c -*-
 *
 *  ----------------------------------------------------------------------
 *  Deque for struct type with only one link pointer (x->next).
 *  ----------------------------------------------------------------------
 *  Created      : Fri Dec  5 11:19:37 1997 tri
 *  Last modified: Tue May 14 20:25:00 2013 tri
 *  ----------------------------------------------------------------------
 *  Copyright Â© 1995-1999, 2001, 2013
 *  Timo J. Rinne <tri@iki.fi>
 *  All rights reserved.  See file COPYRIGHT for details.
 *  ----------------------------------------------------------------------
 *  Any express or implied warranties are disclaimed.  In no event
 *  shall the author be liable for any damages caused (directly or
 *  otherwise) by the use of this software.
 *
 *  Please, send your patches to <tri@iki.fi>.
 *  ----------------------------------------------------------------------
 *
 */
#ifndef __TRQ_CONF__H__
#define __TRQ_CONF__H__ 1

/*
 * stddef.h is included here if such file exists.
 * offsetof should be defined there.
 */
@include_sttdef_h@

#ifndef TRQ_USE_FUNCTIONS
@define_trq_use_functions_default@
#endif

/*
 * If compiler supports inline functions, __TRQ__INLINE__FUNCTION__
 * is defined to the correct keyword.  Usually this is defined
 * as inline, __inline__ or __inline.  If inline functions are
 * not supported, __TRQ__INLINE__FUNCTION__ is undefined.
 */
@define_trq_inline_function@

/*
 * If library is compiled to have smaller objects but less efficient
 * functions, define __TRQ__SMALL__OBJECTS__ 1.
 */
@define_trq_small_objects@

/* Deduce integral type that has as many bits as void *. */
#if (SIZEOF_INT == SIZEOF_VOID_P)
typedef unsigned int trq_p_i_t;
#elif (SIZEOF_LONG == SIZEOF_VOID_P)
typedef unsigned long trq_p_i_t;
#elif (SIZEOF_SHORT == SIZEOF_VOID_P)
typedef unsigned short trq_p_i_t;
#elif (SIZEOF_LONG_LONG == SIZEOF_VOID_P && defined(HAVE_LONG_LONG))
typedef unsigned long long trq_p_i_t;
#else
typedef unsigned long trq_p_i_t;
#endif

#ifdef offsetof
#define _Q_STRUCT_OFFSET(t, m) ((trq_p_i_t)(offsetof(t, m)))
#else
#define _Q_STRUCT_OFFSET(t, m) (((trq_p_i_t)(&(((t *)0)->m))))
#endif

#endif /* !__TRQ_CONF__H__ */
/* eof (trq_conf.h) */
